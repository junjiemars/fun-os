(include "common.scm")

(comment "declarations of C functions")
(c-fun print-int void (int))
(c-fun print-bool void (bool))

(comment "declarations of global functions")
(global-fun scheme-entry)

(global-fun scheme-entry)
(assembler (scheme-entry mem-addr mem-size)
  (comment "prologue start")
  (STMFD SP!, {LR})
  (STMFD SP!, {R4, R5, R6, R7, R8, R9})
  (STMFD SP!, {SL})
  (STMFD SP!, {FP})
  (MOV FP, SP)
  (comment "prologue end")

  (comment "all necessary data kept in dtcm")
  (LDR SL, DATA_START)

  (comment "setting stack beginning to SP")
  (MOV SP, R0)
  (ADD SP, SP, R1)
  (comment "setting heap beginning to SL")
  (STR R0, [SL])

  (comment "processes")
  (BL initialize_processes)

  (comment "interrupts")
  (BL initialize_interrupts)

  (comment "run code")
  (BL user_code)

  (scheme_entry_loop:)
  (B scheme_entry_loop)

  (comment "epilog start")
  (MOV SP, FP)
  (LDMFD SP!, {FP})
  (LDMFD SP!, {SL})
  (LDMFD SP!, {R4, R5, R6, R7, R8, R9})
  (LDMFD SP!, {LR})
  (BX LR)
  (comment "epilog end"))

(global-fun idle-process)
(assembler (idle-process no)
  (comment "process prologue")

  (comment "process body: start")
  (comment "process body: end")

  (comment "enter infinite loop")
  (idle_inf_loop:)
  (B idle_inf_loop)

  (comment "process end"))


(global-fun initialize-processes)
(assembler (initialize-processes)
  (comment "prologue start")
  (STMFD SP!, {LR})
  (STMFD SP!, {R4, R5, R6, R7, R8, R9})
  (STMFD SP!, {SL})
  (STMFD SP!, {FP})
  (MOV FP, SP)
  (comment "prologue end")

  (comment "there are no processes running")
  (MOV R0, #0)
  (STR R0, [SL, #4])
  (comment "active process no")
  (MOV R0, #-1)
  (STR R0, [SL, #8])

  (comment "set active proc list to all -1")
  (MOV R0, SL)
  (ADD R0, R0, #8)
  (MOV R2, #-1)
  (MOV R1, #1)
  (MOV R3, #4)
  (active_proc_loop:)
  (CMP R1, #100)
  (BGT active_proc_end)
  (STR R2, [R0, R3])
  (ADD R1, R1, #1)
  (ADD R3, R3, #4)
  (B active_proc_loop)
  (active_proc_end:)

  (comment "add idle process")
  (ADR R0, idle_process)
  (BL add_process)

  (comment "start idle process")
  (comment "idle proc number in R0")
  (BL enable_process)

  (comment "epilog start")
  (MOV SP, FP)
  (LDMFD SP!, {FP})
  (LDMFD SP!, {SL})
  (LDMFD SP!, {R4, R5, R6, R7, R8, R9})
  (LDMFD SP!, {LR})
  (BX LR)
  (comment "epilog end"))

(global-fun enable-process)
(assembler (enable-process proc-no)
  (comment "prologue start")
  (STMFD SP!, {LR})
  (STMFD SP!, {R4, R5, R6, R7, R8, R9})
  (STMFD SP!, {SL})
  (STMFD SP!, {FP})
  (MOV FP, SP)
  (comment "prologue end")

  (comment "change state to waiting")
  (comment "set R1 to Waiting")
  (MOV R1, #2)
  (comment "tag int")
  (LSL R1, #3)
  (ORR R1, R1, #2)
  (BL change_process_state)

  (comment "epilog start")
  (MOV SP, FP)
  (LDMFD SP!, {FP})
  (LDMFD SP!, {SL})
  (LDMFD SP!, {R4, R5, R6, R7, R8, R9})
  (LDMFD SP!, {LR})
  (BX LR)
  (comment "epilog end"))

(global-fun disable-process)
(assembler (disable-process proc-no)
  (comment "prologue start")
  (STMFD SP!, {LR})
  (STMFD SP!, {R4, R5, R6, R7, R8, R9})
  (STMFD SP!, {SL})
  (STMFD SP!, {FP})
  (MOV FP, SP)
  (comment "prologue end")

  (comment "change state to Blocked")
  (comment "set R1 to Blocked")
  (MOV R1, #3)
  (comment "tag int")
  (LSL R1, #3)
  (ORR R1, R1, #2)
  (BL change_process_state)

  (comment "epilog start")
  (MOV SP, FP)
  (LDMFD SP!, {FP})
  (LDMFD SP!, {SL})
  (LDMFD SP!, {R4, R5, R6, R7, R8, R9})
  (LDMFD SP!, {LR})
  (BX LR)
  (comment "epilog end"))

(global-fun change-process-state)
(assembler (change-process-state proc-no new-state)
  (comment "prologue start")
  (STMFD SP!, {LR})
  (STMFD SP!, {R4, R5, R6, R7, R8, R9})
  (STMFD SP!, {SL})
  (STMFD SP!, {FP})
  (MOV FP, SP)
  (comment "prologue end")

  (comment "copy proc no")
  (MOV R9, R0)
  (comment "copy state")
  (MOV R8, R1)
  (comment "untag int")
  (LSR R8, #3)

  (comment "find a PCB block")
  (MOV R0, SL)
  (ADD R0, R0, #8)
  (MOV R1, #1)
  (MOV R3, #4)
  (proc_pcb_loop:)
  (MUL R4, R1, R3)
  (LDR R2, [R0, R4])
  (CMP R2, R9)
  (BEQ proc_pcb_found)
  (ADD R1, R1, #1)
  (B proc_pcb_loop)
  (proc_pcb_found:)

  (comment "set PCB block")
  (MOV R0, SL)
  (ADD R0, R0, #408)
  (SUB R7, R1, #1)
  (MOV R3, #84)
  (MUL R6, R7, R3)
  (ADD R0, R0, R6)

  (comment "setting proc state")
  (comment "proc state, 1 - Running, 2 - Waiting, 3 - Blocked")
  (STR R8, [R0, #16])

  (comment "epilog start")
  (MOV SP, FP)
  (LDMFD SP!, {FP})
  (LDMFD SP!, {SL})
  (LDMFD SP!, {R4, R5, R6, R7, R8, R9})
  (LDMFD SP!, {LR})
  (BX LR)
  (comment "epilog end"))

(global-fun add-process)
(assembler (add-process proc)
  (comment "prologue start")
  (STMFD SP!, {LR})
  (STMFD SP!, {R4, R5, R6, R7, R8, R9})
  (STMFD SP!, {SL})
  (STMFD SP!, {FP})
  (MOV FP, SP)
  (comment "prologue end")

  (comment "disable interrupts, REG_IME = 0")
  (LDR R5, REG_IME)
  (LDR R7, [R5])
  (STMFD SP!, {R7})
  (MOV R7, #0)
  (STR R7, [R5])

  (comment "save proc addr")
  (MOV R9, R0)

  (comment "ERROR: - FIX THIS")
  (comment "ERROR: problem when > 100 processes")
  (comment "find a free PCB block")
  (MOV R0, SL)
  (ADD R0, R0, #8)
  (MOV R1, #1)
  (MOV R3, #4)
  (free_proc_pcb_loop:)
  (MUL R4, R1, R3)
  (LDR R2, [R0, R4])
  (CMP R2, #-1)
  (BEQ free_proc_pcb_found)
  (ADD R1, R1, #1)
  (B free_proc_pcb_loop)
  (free_proc_pcb_found:)
  (free_proc_pcb_end:)

  (comment "get a new process no")
  (LDR R5, [SL, #4])
  (comment "untag int")
  (LSR R5, #3)
  (comment "increase")
  (ADD R5, R5, #1)
  (comment "tag int")
  (LSL R5, #3)
  (ORR R5, R5, #2)

  (comment "set a proc count")
  (STR R5, [SL, #4])

  (comment "set a new process number to block position")
  (STR R5, [R0, R4])

  (comment "set PCB block")
  (MOV R0, SL)
  (ADD R0, R0, #408)
  (SUB R8, R1, #1)
  (MOV R3, #84)
  (MUL R6, R8, R3)
  (ADD R0, R0, R6)

  (comment "setting")
  (comment "proc no")
  (STR R5, [R0, #4])
  (comment "proc priority")
  (MOV R2, #1)
  (STR R2, [R0, #8])
  (comment "proc address")
  (STR R9, [R0, #12])
  (comment "proc state, 1 - Running, 2 - Waiting, 3 - Blocked")
  (MOV R2, #3)
  (comment "tag int")
  (LSL R2, #3)
  (ORR R2, R2, #2)
  (STR R2, [R0, #16])
  (comment "CPSR - System mode")
  (MOV R2, #0b11111)
  (STR R2, [R0, #20])

  (comment "reg block")
  (ADD R0, R0, #20)
  (comment "SL reg")
  (STR SL, [R0, #44])
  (comment "SP reg")
  (LDR R7, [SL])
  (LDR R6, STACK_SIZE)
  (MUL R6, R1, R6)
  (ADD R6, R6, R7)
  (STR R6, [R0, #56])
  (comment "FP reg")
  (STR R6, [R0, #48])
  (comment "PC reg")
  (ADD R8, R9, #4)
  (STR R8, [R0, #64])
  (comment "in R0 proc no passed to process")
  (STR R5, [R0, #4])
  (comment "other regs not set")

  (comment "return proc no")
  (MOV R0, R5)

  (comment "restore interrupts state")
  (LDMFD SP!, {R6})
  (LDR R5, REG_IME)
  (STR R6, [R5])

  (comment "epilog start")
  (MOV SP, FP)
  (LDMFD SP!, {FP})
  (LDMFD SP!, {SL})
  (LDMFD SP!, {R4, R5, R6, R7, R8, R9})
  (LDMFD SP!, {LR})
  (BX LR)
  (comment "epilog end"))

(global-fun remove-process)
(assembler (remove-process proc-no)
  (comment "prologue start")
  (STMFD SP!, {LR})
  (STMFD SP!, {R4, R5, R6, R7, R8, R9})
  (STMFD SP!, {SL})
  (STMFD SP!, {FP})
  (MOV FP, SP)
  (comment "prologue end")

  (comment "disable interrupts, REG_IME = 0")
  (LDR R5, REG_IME)
  (LDR R7, [R5])
  (STMFD SP!, {R7})
  (MOV R7, #0)
  (STR R7, [R5])


  (comment "copy proc no")
  (MOV R9, R0)

  (comment "find a PCB block")
  (MOV R0, SL)
  (ADD R0, R0, #8)
  (MOV R1, #1)
  (MOV R3, #4)
  (rem_proc_pcb_loop:)
  (MUL R4, R1, R3)
  (LDR R2, [R0, R4])
  (CMP R2, R9)
  (BEQ rem_proc_pcb_found)
  (ADD R1, R1, #1)
  (B rem_proc_pcb_loop)
  (rem_proc_pcb_found:)

  (comment "update process no")
  (LDR R5, [SL, #4])
  (comment "untag int")
  (LSR R5, #3)
  (comment "decrease")
  (SUB R5, R5, #1)
  (comment "tag int")
  (LSL R5, #3)
  (ORR R5, R5, #2)
  (STR R5, [SL, #4])

  (comment "free PCB block")
  (MOV R2, #-1)
  (STR R2, [R0, R4])

  (comment "restore interrupts state")
  (LDMFD SP!, {R6})
  (LDR R5, REG_IME)
  (STR R6, [R5])

  (comment "epilog start")
  (MOV SP, FP)
  (LDMFD SP!, {FP})
  (LDMFD SP!, {SL})
  (LDMFD SP!, {R4, R5, R6, R7, R8, R9})
  (LDMFD SP!, {LR})
  (BX LR)
  (comment "epilog end"))

(global-fun initialize-interrupts)
(assembler (initialize-interrupts)
  (comment "prologue start")
  (STMFD SP!, {LR})
  (STMFD SP!, {R4, R5, R6, R7, R8, R9})
  (STMFD SP!, {SL})
  (STMFD SP!, {FP})
  (MOV FP, SP)
  (comment "prologue end")

  (comment "interrupt start")
  (comment "disable interrupts, REG_IME = 0")
  (LDR R5, REG_IME)
  (MOV R6, #0)
  (STR R6, [R5])

  (comment "set TM0 value")
  (LDR R5, REG_TM0_DAT)
  (MOV R6, #0)
  (STRH R6, [R5])

  (comment "set TM0 control")
  (comment "enabled, irq, prescale 1024")
  (LDR R5, REG_TM0_CNT)
  (LDR R6, TM0_EN)
  (STRh R6, [R5])

  (comment "enable TM0")
  (LDR R5, REG_IE)
  (LDR R6, [R5])
  (ORR R6, R6, #0b1000)
  (MOV R6, #0b1000)
  (STR R6, [R5])

  (comment "set interrupt handler")
  (LDR R5, INTERR_HANDLER)
  (ADR R6, interrupt_handler)
  (STR R6, [R5])

  (comment "enable interrupts, REG_IME = 1")
  (LDR R5, REG_IME)
  (MOV R6, #0b1)
  (STR R6, [R5])
  (comment "interrupt end")

  (comment "epilog start")
  (MOV SP, FP)
  (LDMFD SP!, {FP})
  (LDMFD SP!, {SL})
  (LDMFD SP!, {R4, R5, R6, R7, R8, R9})
  (LDMFD SP!, {LR})
  (BX LR)
  (comment "epilog end"))

(global-fun interrupt-handler)
(assembler (interrupt-handler)
  (comment "prologue start")
  (STMFD SP!, {LR})
  (STMFD SP!, {R4, R5, R6, R7, R8, R9})
  (STMFD SP!, {SL})
  (STMFD SP!, {FP})
  (MOV FP, SP)
  (comment "prologue end")

  (LDR R5, REG_IF)
  (LDR R6, [R5])

  (vblank:)
  (MOV R7, R6)
  (AND R7, R7, #0b0001)
  (CMP R7, #0b0001)
  (BNE timer)
  (MOV R8, #0b0001)

  (timer:)
  (MOV R7, R6)
  (AND R7, R7, #0b1000)
  (CMP R7, #0b1000)
  (BNE end)
  (ORR R8, R8, #0b1000)

  (comment "low level operations")
  (comment "reg r0-r3 not used later")
  (comment "don't need to be saved on the stack")

  (comment "select process no to run")
  (comment "process no in R0")
  (MOV R0, #199)
  (BL print_int)
  (BL select_process)
  (MOV R9, R0)
  (LSR R0, #3)
  (BL print_int)
  (MOV R0, R9)
  (BL run_process)

  (end:)
  (STR R8, [R5])

  (comment "epilog start")
  (MOV SP, FP)
  (LDMFD SP!, {FP})
  (LDMFD SP!, {SL})
  (LDMFD SP!, {R4, R5, R6, R7, R8, R9})
  (LDMFD SP!, {LR})
  (BX LR)
  (comment "epilog end"))

(global-fun run-process)
(assembler (run-process no)
  (comment "it is called from interrupt handler")

  (comment "copy active process to PCB block")
  (LDR R4, [SL, #8])
  (CMP R4, #-1)
  (comment "no active process, just load a new process")
  (BEQ run_process_load_proc)

  (comment "find active proc PCB block")
  (ADD R1, SL, #8)
  (MOV R2, #0)
  (run_proc_active_pcb_find:)
  (ADD R1, R1, #4)
  (ADD R2, R2, #1)
  (LDR R3, [R1])
  (CMP R4, R3)
  (BEQ run_proc_active_pcb_found)
  (B run_proc_active_pcb_find)

  (run_proc_active_pcb_found:)
  (comment "active pcb found")

  (SUB R2, R2, #1)
  (MOV R3, #84)
  (MUL R1, R2, R3)
  (ADD R2, SL, #428)
  (ADD R2, R1, R2)
  (comment "R2 points to CPSR positionin PCB")

  (comment "save active process to pcb")
  (comment "state -> Waiting")
  (MOV R1, #2)
  (comment "tag int")
  (LSL R1, #3)
  (ORR R1, R1, #2)
  (STR R1, [R2, #-4])
  (comment "CPSR")
  (MRS R1, SPSR)
  (STR R1, [R2])
  (comment "R0")
  (LDR R1, [SP, #36])
  (STR R1, [R2, #4])
  (comment "R1")
  (LDR R1, [SP, #40])
  (STR R1, [R2, #8])
  (comment "R2")
  (LDR R1, [SP, #44])
  (STR R1, [R2, #12])
  (comment "R3")
  (LDR R1, [SP, #48])
  (STR R1, [R2, #16])
  (comment "R4")
  (LDR R1, [SP, #8])
  (STR R1, [R2, #20])
  (comment "R5")
  (LDR R1, [SP, #12])
  (STR R1, [R2, #24])
  (comment "R6")
  (LDR R1, [SP, #16])
  (STR R1, [R2, #28])
  (comment "R7")
  (LDR R1, [SP, #20])
  (STR R1, [R2, #32])
  (comment "R8")
  (LDR R1, [SP, #24])
  (STR R1, [R2, #36])
  (comment "R9")
  (LDR R1, [SP, #28])
  (STR R1, [R2, #40])

  (comment "starting from R10 special registers")

  (comment "R10 - SL")
  (LDR R1, [SP, #4])
  (STR R1, [R2, #44])

  (comment "R11 - FP")
  (LDR R1, [SP])
  (STR R1, [R2, #48])

  (comment "R12 - IP")
  (LDR R1, [SP, #52])
  (STR R1, [R2, #52])

  (comment "R13 - SP")
  (comment "go back to SYSTEM mode")
  (comment "to access process SP")
  (MRS R3, CPSR)
  (ORR R1, R3, #0b11111)
  (MSR CPSR, R1)
  (MOV R1, SP)
  (MSR CPSR, R3)
  (STR R1, [R2, #56])

  (comment "R14 - LR")
  (MRS R3, CPSR)
  (ORR R1, R3, #0b11111)
  (MSR CPSR, R1)
  (MOV R1, LR)
  (MSR CPSR, R3)
  (STR R1, [R2, #60])

  (comment "R15 - PC")
  (LDR R1, [SP, #56])
  (STR R1, [R2, #64])


  (run_process_load_proc:)
  (comment "find new proc PCB block")

  (ADD R1, SL, #8)
  (MOV R2, #0)
  (run_proc_new_pcb_find:)
  (ADD R1, R1, #4)
  (ADD R2, R2, #1)
  (LDR R3, [R1])
  (CMP R0, R3)
  (BEQ run_proc_new_pcb_found)
  (B run_proc_new_pcb_find)

  (run_proc_new_pcb_found:)
  (comment "new pcb found")

  (SUB R2, R2, #1)
  (MOV R3, #84)
  (MUL R1, R2, R3)
  (ADD R2, SL, #428)
  (ADD R2, R1, R2)
  (comment "R2 points to CPSR positionin PCB")

  (comment "load new process from pcb")
  (comment "state -> Running")
  (MOV R1, #1)
  (comment "tag int")
  (LSL R1, #3)
  (ORR R1, R1, #2)
  (STR R1, [R2, #-4])
  (comment "CPSR")
  (LDR R1, [R2])
  (MSR SPSR, R1)
  (comment "R0")
  (LDR R1, [R2, #4])
  (STR R1, [SP, #36])
  (comment "R1")
  (LDR R1, [R2, #8])
  (STR R1, [SP, #40])
  (comment "R2")
  (LDR R1, [R2, #12])
  (STR R1, [SP, #44])
  (comment "R3")
  (LDR R1, [R2, #16])
  (STR R1, [SP, #48])
  (comment "R4")
  (LDR R1, [R2, #20])
  (STR R1, [SP, #8])
  (comment "R5")
  (LDR R1, [R2, #24])
  (STR R1, [SP, #12])
  (comment "R6")
  (LDR R1, [R2, #28])
  (STR R1, [SP, #16])
  (comment "R7")
  (LDR R1, [R2, #32])
  (STR R1, [SP, #20])
  (comment "R8")
  (LDR R1, [R2, #36])
  (STR R1, [SP, #24])
  (comment "R9")
  (LDR R1, [R2, #40])
  (STR R1, [SP, #28])

  (comment "starting from R10 special registers")

  (comment "R10 - SL")
  (LDR R1, [R2, #44])
  (STR R1, [SP, #4])

  (comment "R11 - FP")
  (LDR R1, [R2, #48])
  (STR R1, [SP])

  (comment "R12 - IP")
  (LDR R1, [R2, #52])
  (STR R1, [SP, #52])

  (comment "R13 - SP")
  (comment "go back to SYSTEM mode")
  (comment "to set process SP")
  (MRS R3, CPSR)
  (ORR R1, R3, #0b11111)
  (MSR CPSR, R1)
  (LDR R1, [R2, #56])
  (MOV SP, R1)
  (MSR CPSR, R3)

  (comment "R14 - LR")
  (MRS R3, CPSR)
  (ORR R1, R3, #0b11111)
  (MSR CPSR, R1)
  (LDR R1, [R2, #60])
  (MOV LR, R1)
  (MSR CPSR, R3)

  (comment "R15 - PC")
  (LDR R1, [R2, #64])
  (STR R1, [SP, #56])

  (comment "set active process no")
  (STR R0, [SL, #8])
  (run_proc_end:))

(global-fun select-process)
(assembler (select-process)
  (comment "it is called from interrupt handler")

  (comment "prologue start")
  (STMFD SP!, {LR})
  (STMFD SP!, {R4, R5, R6, R7, R8, R9})
  (STMFD SP!, {SL})
  (STMFD SP!, {FP})
  (MOV FP, SP)
  (comment "prologue end")

  (comment "check if there is a running process")
  (LDR R0, [SL, #8])
  (CMP R0, #-1)
  (BEQ sele_proc_sel_no_running)

  (sele_proc_sel_is_running:)
  (comment "find proc PCB block")
  (ADD R1, SL, #8)
  (MOV R2, #0)
  (sele_proc_sel_find:)
  (ADD R1, R1, #4)
  (ADD R2, R2, #1)
  (LDR R3, [R1])
  (CMP R0, R3)
  (BEQ sele_proc_next_find)
  (B sele_proc_sel_find)

  (sele_proc_sel_no_running:)
  (ADD R1, SL, #8)
  (MOV R2, #0)

  (sele_proc_next_find:)
  (comment "current process PCB found")
  (comment "find next waiting process")
  (ADD R1, R1, #4)
  (ADD R2, R2, #1)
  (CMP R2, #100)
  (BGT sele_proc_next_not_found)
  (LDR R3, [R1])
  (CMP R3, #-1)

  (BEQ sele_proc_next_find)
  (comment "we have PCB block")
  (comment "check if a state of the process is waiting")
  (comment "get PCB block")
  (ADD R4, SL, #408)
  (SUB R5, R2, #1)
  (MOV R3, #84)
  (MUL R6, R5, R3)
  (ADD R4, R4, R6)
  (LDR R7, [R4, #16])
  (MOV R8, #3)
  (comment "tag int")
  (LSL R8, #3)
  (ORR R8, R8, #2)
  (CMP R7, R8)
  (BNE sele_proc_next_found)
  (B sele_proc_next_find)

  (sele_proc_next_not_found:)
  (comment "did not find any process")
  (comment "start searching from the beginning")
  (B sele_proc_sel_no_running)

  (sele_proc_next_found:)
  (LDR R0, [R4, #4])

  (comment "epilog start")
  (MOV SP, FP)
  (LDMFD SP!, {FP})
  (LDMFD SP!, {SL})
  (LDMFD SP!, {R4, R5, R6, R7, R8, R9})
  (LDMFD SP!, {LR})
  (BX LR)
  (comment "epilog end"))

(global-fun alloc-mem)
(assembler (alloc-mem mem_size)
  (comment "allocates specified memory size on the heap")
  (comment "8-byte borders")
  (LDR R1, [SL])
  (AND R2, R1, #0b111)
  (CMP R2, #0)
  (BEQ .alloc_alligned)
  (comment "need to align to nearest boundary")
  (AND R1, R1, #0xFFFFFFF8)
  (ADD R1, R1, #0b1000)
  (.alloc_alligned:)
  (comment "heap pointer is aligned")
  (MOV R3, R1)
  (comment "move heap pointer")
  (comment "untag int")
  (LSR R0, #3)
  (ADD R1, R1, R0)
  (STR R1, [SL])
  (comment "return")
  (MOV R0, R3)
  (BX LR))
