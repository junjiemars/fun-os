Tagged pointer representation
8-bytes boundaries => 000000TTT => 3 bits for a tag => 8 possibilities
start with SP = 0x023ff000ldr R0, =__end__

heap start __end__
heap start __ewram_end
beginning heap ldr R0, =__end__
heap end __eheap_end 


Atom      
====
-- mask --- 
Fixnum         NNN010
Boolean          B100
  #f             0100
  #t             1100
'()               000
Char     CCCCCCCCC110 // #\A #\7 , easy to convert char <-> int, just shift

Symbol        00000101


Refrence type 
==============
-- mask ---   RRRRRRR1
Pair          00000001
Closure       00000011
Vector/Record 00000101
String        00000111


Prolog & Epilog
======

Stack is of TYPE FULL

Caller
  * Save r0-r3 and r12 on the stack
  * Set arguments 0-3 in register r0-r3 and the rest arguments on the stack
  *  -- CALL --
  * Subtract from value of the SP number of arguments
  * Restore registers r0-r3 and r12 from the stack


Calling
  * Save LR on the stack
  * Save non scratch registers r4-r9
  * Save SL register on the stack
  * Save FP on the stack
  * Set new FP to current value of SP
  * -- DO --
  * Load value of FP to SP
  * Restore SL register
  * Restore r4-r9 registers
  * Restore LR register
  * Return to the caller


Frame stack:
-----------------------
|       arg_n         |
|       ....          |
|       arg_5         |
|       arg_4         |
|        LR           |
|        R4           |
|       ....          |
|        R9           |
|        SL           |
|        FP <- new FP |
|       ....          |
-----------------------


====
Lambdas

(lambda (x y z)
  (let ((f (lambda (x y a b)
              (+ (* a x) (* b y)))))
    (- (f x y 1 2) (f x y 3 4))))

Lambda lifting:
(lambda (x y z)
  (let ((f (lambda (a b)
            (+ (* a x) (* b y)))))
    f))

Closure:
(lambda (x y z)
  (let ((f (vector
            (lambda (self a b)
              (+ (* a (vector-ref self 1))
                 (* b (vector-ref self 2))))
            x
            y)))
    (- ((vector-ref f 0) f 1 2)
       ((vector-ref f 0) f 3 4))))

====
Tail call

A tail position in our language is defined recursively as follows:
* The body of a procedure is in tail position.
* If a let expression is in tail position, then the body of the let is in tail position.
* If the conditional expression (if test conseq altern) is in tail position, then the conseq and altern branches are also in tail position.
* All other expressions are not in tail position.


====
Implementations

GC
* First idea
* handle section & storage section
* All references to an object go through its handle.
[ ... |   |     | ... ] - handle section

       |      |
       v      v
[... | 1  |  string               | ... ]


Scheme objects:
* Immediate
* Allocated

Constants:
* constant expression replaced by reference to a fresh variable
(f x '(1 2))
  |
  v
(define cst32 (cons 2 '()))
(define cst33 (cons 1 cst32))
(f x cst33)

* encoding the program constants into a byte-vector descriptor that is integrated with the executable
"biz"
(1 2)          -> 0, 2, 52        -> [... | 16 | 17 | 18 | ...]
#(a #t)                                      |    |    |
                                             |    |   #(a #t)
                                             |  (1 2)
                                           "biz"
Example:
Const 0: ("biz"), Const 1: (#f 2), Const 2: "biz"
Obj. 0: 2          Obj. 3: "biz"     Obj. 5: #f
Obj. 1: ()         Obj. 4: (3 . 2)   Obj. 6: (5 . 2)
Obj. 2: (0 . 1)

Const 0: Obj. 4, Const 1: Obj. 6, Const 2: Obj. 3


Symbols
– A symbol is a two-field object: one reference to its name, which is a string, and one link to the next symbol in the table. The whole table is a kind of list of strings but its skeleton is made of symbols instead of pairs.
– A symbol is a variable-sized object that directly contains its name and a link to the next symbol.
– A symbol is an index into a table of names. This way, the symbol becomes a non-allocated object and the table of names can be represented compactly as a vector of strings.



Heap memory
* 8-byte boundaries (double-word boundaries)
* * gives 3 bits for tagging

Design Decisions

Traditional Scheme implementation?
* heap-allocated call frames
* linked environments
* fast closure-creation, continuations
* slow procedure calls, variable references

Traditional Algol/C implementation?
* stack-allocated call frames
* variables in frames or registers
* fast procedure calls, variable references
* closures, continuations problematic


Stack allocated call frames
* call/cc copies the stack
* throw reinstates the stack

Display (Flat) Closures
* bank of pointers replacing static chain
* closure
* * [code_ptr | value | value | value]
* * code_ptr - label

Assignment Conversion
Observations:
* problem only for assigned variables
* most variables are never assigned (in well-written Scheme code)
(Now obvious) solution:
* add an indirect for assigned variables
* don’t create multiple copies
* instead store each in heap-allocated box

Costs:
* more continuation overhead
* potentially more closure-creation overhead
* assignment overhead (or not)
Benefits:
* less procedure-call overhead
* less variable reference overhead
* closures don’t hold onto garbage


Assignment another idea:

(let ((f (lambda (c)
            (cons (lambda (v) (set! c v))
                  (lambda () c)))))
  (let ((p (f 0)))
    ((car p) 12)
    ((cdr p))))
=>
(let ((f (lambda (t0)
          (let ((c (vector t0)))
            (cons (lambda (v) (vector-set! c 0 v))
                (lambda () (vector-ref c 0)))))))
  (let ((p (f 0)))
    ((car p) 12)
    ((cdr p))))



Stop-and-copy collector


=====================
Memory management

Stack 1.5 MB = 1.5 * 1024 KB = 1536 KB = 1572864 B
Heap  2.0 MB = 2.0 * 1024 KB = 2048 KB = 2097152 B

Maximum 100 processes, each has 15 KB stack
PROC_NO = 100
PROC_STACK_SIZE = 15 KB

SL (r12) points to C stack beginning which is in DTCM memory

[SL] - current heap position

SL + 4 - PCB segment

=====================
Interrupts

State of the stack when ISR is called

-------
| R0  |
-------
| R1  |
-------
| R2  |
-------
| R3  |
-------
| R12 |
-------
| LR  |
|     |


=====================
Processes

PCB section:
  4 B - #processes
  4 B - number of a processor running now
  100 B - active PCBs, -1 no active, >= 0 - proc no
  80 B - first PCB block

In total PCB section = 4 B + 4 B + 4 B * 100 + 80 B * PROC_NO = 8412 B

PCB block:
  4 B - process no
  4 B - process priority
  4 B - process address
  4 B - process state
  64 B - registers ( 16 registers * 4 B )

Process priority:
  0 - system process
  1 - normal process

Process state:
* 1 - Running - currently running
* 2 - Waiting - currently waiting to be run
* 3 - Blocked - stopped, not in the queue to be run


    -------------------
    |                 |
    v                 |
[ Waiting ] ---> [ Running ] 
   |  ^
   |  |
   |  |
   |  |
   |  |
   v  |
[ Blocked ]

API:
  public:
    add-process proc - adds process with a given address (name), process in state Blocked, returns process number
    remove-process no - removes process with a given number
    start-process no - changes a process state to Waiting
    stop-process no - changes a process state to Blocked
  private:
    initialize-processes - returns process no which should be run
    select-process - returns process no which should be run
    load-process no - loads process state from PCB block
    unload-process no - unloads process and save its state to PCB block


=====================
Compilation process

[ prog.scm ]
     |
     | SchemeCompiler
     |
     v
[ prog.s ]
     |
     | arm-eabi-gcc + DevKit + sandbox
     |
     v
[ sandbox.nds ]


============
Scheme Spec

* stack-allocated call frames
* call/cc copies the stack
* stack copy my replicate locations
* display (flat) closures
* * Static chain replaced
* * [ code | value1 | value2 | value2 ]
* * Variable - might replicate locations
* * add an indirect for assigned variables
* (load "test.scm")
* (cons 1 2) - (pair? l) - (car l) - (cdr l)
* global var
* * (define az 13)
* tail call


* equality
** eq? It compares addresses of two objects and returns #t if they are same.
** eqv? It compares types and values of two object stored in the memory space. 
** equal? It is used to compare sequences such as list or string.

-- reserved names
-- type checking
-- pair? It returns #t if the object consists of cons cells (or a cons cell).
-- list? It returns #t if the object is a list. Be careful in that '() is a list but not a pair.
-- null? It returns #t if the object is '().
-- symbol? It returns #t if the object is a symbol.
-- char? It returns #t if the object is a character. 
-- string? It returns #t if the object is a string. 
-- number? It returns #t if the object is a number.
-- complex? It returns #t if the object is a complex number.
-- real? It returns #t if the object is a real number
-- rational? It returns #t if the object is a rational number.
-- integer? It returns #t if the object is an integral
-- exact? It returns #t if the object is not a floating point number.
-- inexact? It returns #t if the object is a floating point number.

-- cond expression
(cond
  (predicate_1 clauses_1)
  (predicate_2 clauses_2)
    ......
  (predicate_n clauses_n)
  (else        clauses_else))

